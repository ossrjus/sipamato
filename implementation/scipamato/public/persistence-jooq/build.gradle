plugins {
    id 'nu.studer.jooq' version '3.0.3'
    id "org.flywaydb.flyway" version "5.2.4"
}

dependencies {
    api project(":public-persistence-api")
    api project(":common-persistence-jooq")
    implementation project(":public-entity")
    implementation project(":common-utils")

    jooqRuntime "org.postgresql:postgresql:42.2.5"
    runtimeOnly "org.postgresql:postgresql:42.2.5"
    api "org.jooq:jooq"

    implementation("org.apache.commons:commons-lang3:3.8.1")
    implementation("org.apache.commons:commons-collections4:4.3")

    testCompile project(":common-persistence-jooq-test")
    testCompile project(":common-test")
    testCompile project(":common-utils")

    testCompileOnly "org.projectlombok:lombok:1.18.6"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.6"
}

description = "SciPaMaTo-Public:: Persistence jOOQ Project"

def generatedSourcesPath = 'build/generated-src/jooq'
sourceSets.main.java.srcDirs = [generatedSourcesPath, 'src/main/java']

def bootProps = new Properties()
file("src/main/resources/application.properties").withInputStream {
    bootProps.load(it)
}// TODO mechanism to read "src/test/resources/application.properties"

jooq {
    version = '3.11.10'
    edition = 'OSS'
    scipamatoPublic(sourceSets.main) {
        jdbc {
            driver = bootProps['spring.datasource.driver-class-name']
            url = bootProps['spring.datasource.url']
            user = bootProps['spring.datasource.hikari.username']
            password = bootProps['spring.datasource.hikari.password']
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = bootProps['db.schema']
                recordVersionFields = 'version'
            }
            generate {
                deprecated = false
                instanceFields = true
                pojos = false
                springAnnotations = true
            }
            target {
                packageName = 'ch.difty.scipamato.publ.db'
                directory = generatedSourcesPath
            }
        }
    }
}

flyway {
    url = bootProps['spring.datasource.url']
    user = bootProps['spring.flyway.user']
    password = bootProps['spring.flyway.password']
    schemas = [bootProps['db.schema']]
}

generateScipamatoPublicJooqSchemaSource.dependsOn flywayMigrate
