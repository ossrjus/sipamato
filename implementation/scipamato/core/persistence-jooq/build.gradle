plugins {
    id 'nu.studer.jooq' version '3.0.3'
    id "org.flywaydb.flyway" version "5.2.4"
}

configurations {
    flywayMigration
}

dependencies {
    api project(":core-persistence-api")
    api project(":common-persistence-jooq")
    implementation project(":core-entity")
    implementation project(":common-utils")

    jooqRuntime "org.postgresql:postgresql"
    runtimeOnly "org.postgresql:postgresql"
    api "org.jooq:jooq"

    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.commons:commons-collections4:4.3")

    testCompile project(":common-persistence-jooq-test")
    testCompile project(":common-test")
    testCompile project(":core-entity")

    testCompile "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    flywayMigration "org.postgresql:postgresql"
    integrationTestRuntimeOnly "org.postgresql:postgresql"
}

description = "SciPaMaTo-Core :: Persistence jOOQ Project"

def generatedSourcesPath = 'build/generated-src/jooq'
sourceSets.main.java.srcDirs = [generatedSourcesPath, 'src/main/java']

def bootCoreProps = new Properties()
file("src/main/resources/application.properties").withInputStream {
    bootCoreProps.load(it)
}

def bootCoreItProps = new Properties()
file("src/intTest/resources/application.properties").withInputStream {
    bootCoreItProps.load(it)
}

jooq {
    edition = 'OSS'
    scipamatoCore(sourceSets.main) {
        jdbc {
            driver = bootCoreProps['spring.datasource.driver-class-name']
            url = bootCoreProps['spring.datasource.url']
            user = bootCoreProps['spring.datasource.hikari.username']
            password = bootCoreProps['spring.datasource.hikari.password']
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = bootCoreProps['db.schema']
                recordVersionFields = 'version'
            }
            generate {
                deprecated = false
                instanceFields = true
                pojos = false
                springAnnotations = true
            }
            target {
                packageName = 'ch.difty.scipamato.core.db'
                directory = generatedSourcesPath
            }
        }
    }
    scipamatoCoreIt(sourceSets.integrationTest) {
        jdbc {
            driver = bootCoreItProps['spring.datasource.driver-class-name']
            url = bootCoreItProps['spring.datasource.url']
            user = bootCoreItProps['spring.datasource.hikari.username']
            password = bootCoreItProps['spring.datasource.hikari.password']
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = bootCoreItProps['db.schema']
                recordVersionFields = 'version'
            }
            generate {
                deprecated = false
                instanceFields = true
                pojos = false
                springAnnotations = true
            }
            target {
                packageName = 'ch.difty.scipamato.core.db'
                directory = generatedSourcesPath
            }
        }
    }
}

flyway {
    url = bootCoreProps['spring.datasource.url']
    user = bootCoreProps['spring.flyway.user']
    password = bootCoreProps['spring.flyway.password']
    schemas = [bootCoreProps['db.schema']]
    configurations = ['compile', 'flywayMigration']
}

task flywayMigrateIt(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    description = 'Triggers database migrations for the integration test databases'
    url = bootCoreItProps['spring.datasource.url']
    user = bootCoreItProps['spring.flyway.user']
    password = bootCoreItProps['spring.flyway.password']
    schemas = [bootCoreItProps['db.schema']]
    locations = [bootCoreItProps['spring.flyway.locations']]
    configurations = ['compile', 'flywayMigration']
}

task flywayCleanIt(type: org.flywaydb.gradle.task.FlywayCleanTask) {
    description = 'Drops all objects in the configured schemas of the integration test database'
    url = bootCoreItProps['spring.datasource.url']
    user = bootCoreItProps['spring.flyway.user']
    password = bootCoreItProps['spring.flyway.password']
    schemas = [bootCoreItProps['db.schema']]
    configurations = ['compile', 'flywayMigration']
}

task flywayInfoIt(type: org.flywaydb.gradle.task.FlywayInfoTask) {
    description = 'Prints the details and status information about all the migrations.'
    url = bootCoreItProps['spring.datasource.url']
    user = bootCoreItProps['spring.flyway.user']
    password = bootCoreItProps['spring.flyway.password']
    schemas = [bootCoreItProps['db.schema']]
    configurations = ['compile', 'flywayMigration']
}


compileKotlin.dependsOn generateScipamatoCoreJooqSchemaSource
generateScipamatoCoreJooqSchemaSource.dependsOn flywayMigrate
generateScipamatoCoreItJooqSchemaSource.dependsOn flywayMigrateIt

project.tasks.getByName('compileJava').dependsOn -= 'generateScipamatoCoreItJooqSchemaSource'
project.tasks.getByName('integrationTest').dependsOn += 'generateScipamatoCoreItJooqSchemaSource'