plugins {
    id 'nu.studer.jooq' version '3.0.3'
}

description = "SciPaMaTo-Core :: Synchronization Project"

sourceSets.main.resources.srcDirs = ["src/main/java", "src/main/resources"]
sourceSets.main.resources.includes = ["**/*.html", "**/*.properties"]
sourceSets.test.resources.srcDirs = ["src/test/java", "src/test/resources"]

dependencies {
    implementation project(":scipamato-common-utils")

    implementation "org.springframework.boot:spring-boot-starter-batch:2.1.4.RELEASE"
    implementation("org.springframework.boot:spring-boot-configuration-processor:2.1.4.RELEASE") {
        exclude  group: "com.vaadin.external.google", module: "android-json"
    }

    implementation "org.springframework.boot:spring-boot-starter-jooq:2.1.4.RELEASE"
    jooqRuntime "org.postgresql:postgresql:42.2.5"
    runtimeOnly "org.postgresql:postgresql:42.2.5"
    implementation "org.jooq:jooq"

    testCompile project(":scipamato-common-test")
    testCompile project(":scipamato-common-persistence-jooq-test")
    testCompile "org.apache.bval:bval-jsr:2.0.0"
}


def generatedSourcesPath = 'build/generated-src/jooq'
sourceSets.main.java.srcDirs = [generatedSourcesPath, 'src/main/java']

def bootProps = new Properties()
file('src/main/resources/application.properties').withInputStream {
    bootProps.load(it)
}// TODO mechanism to read 'src/test/resources/application.properties'

jooq {
    version = '3.11.10'
    edition = 'OSS'
    scipamatoCore(sourceSets.main) {
        jdbc {
            driver = bootProps['sync.source.datasource.driver-class-name']
            url = bootProps['sync.source.datasource.jdbc-url']
            user = bootProps['sync.source.datasource.username']
            password = bootProps['sync.source.datasource.password']
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = bootProps['db.schema']
                includes = 'code_class|code_class_tr|code|code_tr|language|keyword|keyword_tr|paper|paper_code|newsletter|newsletter_topic|newsletter_topic_tr|newsletter_newsletter_topic|paper_newsletter|new_study_page_link'
                recordVersionFields = 'version'
            }
            generate {
                deprecated = false
                instanceFields = true
                pojos = false
                springAnnotations = true
            }
            target {
                packageName = 'ch.difty.scipamato.core.db'
                directory = generatedSourcesPath
            }
        }
    }
    scipamatoPublic(sourceSets.main) {
        jdbc {
            driver = bootProps['sync.target.datasource.driver-class-name']
            url = bootProps['sync.target.datasource.jdbc-url']
            user = bootProps['sync.target.datasource.username']
            password = bootProps['sync.target.datasource.password']
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = bootProps['db.schema']
                includes = 'code_class|code|language|keyword|paper|new_study|new_study_topic|newsletter|newsletter_topic|new_study_page_link'
                recordVersionFields = 'version'
            }
            generate {
                deprecated = false
                instanceFields = true
                pojos = true
                springAnnotations = true
            }
            target {
                packageName = 'ch.difty.scipamato.publ.db'
                directory = generatedSourcesPath
            }
        }
    }
}
